var roleUpgrader = {
/*
    run: function(creep) {

        if(creep.memory.upgrading && creep.carry.energy == 0) {
            creep.memory.upgrading = false;
            creep.say('harvesting');
	    }
	    if(!creep.memory.upgrading && creep.carry.energy == creep.carryCapacity) {
	        creep.memory.upgrading = true;
	        creep.say('upgrading');
	    }

	    if(creep.memory.upgrading) {
	        
            
            if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {
                creep.moveTo(creep.room.controller);
            }
        }
        else {
            
            var source = creep.room.storage;
            if(creep.withdraw(source, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                creep.moveTo(source);
            }
            else
            {
                sources = creep.room.find(FIND_SOURCES);
                if(creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(sources[0]);
                }
            }
        }
	}
	
*/
	
	
	 run: function(creep) 
    {

        if(creep.memory.building && creep.carry.energy == 0) 
        {
            creep.memory.building = false;
            //creep.say('harvesting');
	    }
	    if(!creep.memory.building && creep.carry.energy == creep.carryCapacity) 
	    {
	        creep.memory.building = true;
	        //creep.say('building');
	    }


        if(creep.memory.building) 
        {
            /*
            var targets = creep.pos.findClosestByPath(FIND_CONSTRUCTION_SITES);

            if(targets != undefined)
            {
                if(creep.build(targets) == ERR_NOT_IN_RANGE) 
                {
                    creep.moveTo(targets);
                }
            }
            else
            {
                targets = creep.pos.findClosestByPath(FIND_STRUCTURES, { filter: (structure) => (structure.structureType == STRUCTURE_WALL || structure.structureType == STRUCTURE_RAMPART) && structure.hits < 150000 });
                if(creep.repair(targets) == ERR_NOT_IN_RANGE) 
                {
                    creep.moveTo(targets);
                }
            }
            */
            var towers = Game.rooms[roomName].find(
            FIND_MY_STRUCTURES, {filter: {structureType: STRUCTURE_TOWER}});
            
            if(creep.deposit(towers,RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) 
                {
                    creep.moveTo(towers);
                }
            
        }
        else 
        {
            
            var sources = creep.room.storage;
            if(creep.withdraw(sources,RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) 
            {
                creep.moveTo(sources);
            }
            
            /*else
            {
                var sources = creep.pos.findClosestByPath(FIND_STRUCTURES, {
                    filter: (structure) => structure.structureType == STRUCTURE_CONTAINER && structure.store[RESOURCE_ENERGY] > 0 
            });
                if(creep.withdraw(sources,RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) 
                {
                    creep.moveTo(sources);
                }
                
            }*/
        }
	}
	
};

module.exports = roleUpgrader;