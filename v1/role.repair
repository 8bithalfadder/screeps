var roleRepairer = {

    /** @param {Creep} creep **/
    run: function(creep) {

    var finaltarget;

        if(creep.memory.upgrading && creep.carry.energy == 0) {
            creep.memory.upgrading = false;
            creep.say('harvesting');
	    }
	    if(!creep.memory.upgrading && creep.carry.energy == creep.carryCapacity) {
	        creep.memory.upgrading = true;
	        creep.say('upgrading');
	    }

	    if(creep.memory.upgrading) {
	        
	        var target = creep.room.find(FIND_STRUCTURES, {
                    filter: (structure) => {
                        return ( structure.structureType == STRUCTURE_CONTAINER)
                    }
            });
            /*
            if(target.hits < ( target.hitsMax * .8 ))
            {
                creep.say('container needs repair');
                if(creep.repair(target[0]) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(target[0]);
                }
            }
            else
            {
                //creep.say('walls');
                
                target = creep.room.find(FIND_STRUCTURES, {
                    filter: (structure) => {
                        return ( structure.structureType == STRUCTURE_WALL);
                    }
            });
                for (var i = 0; i < target.length; i++)
                {
                    
                    if(target[i].hits < ( target[i].hitsMax * 0.01 ))
                    {
                        finaltarget = target[i];
                      
                    }
                }
                
            console.log('target: ' + target.length)
            */
            if(creep.repair(target[0]) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(target[0]);
                }
                else
                {
                    creep.moveTo(22,19);
                }
            
            
        }
        else {
            var sources = creep.room.find(FIND_STRUCTURES, {
                    filter: (structure) => {
                        return ( structure.structureType == STRUCTURE_CONTAINER) &&
                            structure.store > 0;
                    }
            });
            
            if(creep.withdraw(sources[0],RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                creep.moveTo(sources[0]);
            }
            else
            {
                sources = creep.room.find(FIND_SOURCES);
                if(creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(sources[0]);
                }
            }
        }
	}
};

module.exports = roleRepairer;